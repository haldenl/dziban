'use strict';

const args = process.argv;

if (args.length != 4) {
  throw new Error('Usage: node graphscapeToAsp.js <path_to_graphscape_weight_def> <output_dir>');
}

const def_path = args[2];

const def = require(def_path);

const weights = [];
for (const key in def.DEFAULT_EDIT_OPS) {
  const opGroup = def.DEFAULT_EDIT_OPS[key];

  for (const name in opGroup) {
    const aspName = `edit_${name.toLowerCase()}_weight`;
    const cost = Math.round(opGroup[name].cost * 100);  // need integers

    const aspWeight = `#const ${aspName} = ${cost}.`
    weights.push(aspWeight);
  }
}

let weightsOutput = `%% FILE GENERATED BY graphscapeToAsp.js, DO NOT MODIFY %%\n`;
weightsOutput += weights.join('\n');

const fs = require('fs');

const output_dir = args[3];

fs.writeFileSync(`${output_dir}/graphscape.lp`, weightsOutput);

const rules = [];
const markGroup = def.DEFAULT_EDIT_OPS['markEditOps'];

for (let name in markGroup) {
  name = name.toLowerCase();
  const marks = name.split('_');
  const rule = `compare(edit_${name},V1,V2) :- mark(V1,${marks[0]}), mark(V2,${marks[1]}).`;

  rules.push(rule);
}

const encodingGroup = def.DEFAULT_EDIT_OPS['encodingEditOps'];

for (let name in encodingGroup) {
  name = name.toLowerCase();
  tokens = name.split('_');
  action = tokens[0];
  props = tokens.splice(1);

  if (action === 'add') {
    if (props.length === 1) {
      rules.push(`compare(edit_${name},V1,V2) :- `)
    }
  }
}

let rulesOutput = `%% FILE GENERATED BY graphscapeToAsp.js, DO NOT MODIFY %%\n`;
rulesOutput += rules.join('\n');

fs.writeFileSync(`${output_dir}/compare.lp`, rulesOutput);